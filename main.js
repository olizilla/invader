// Generated by CoffeeScript 1.12.4

/*
main.coffee
===========
Creates a randomised model of an Invader:

> "The Invader occupies a 5 x 5 grid of blocks (25 bits).
> Internally, the Invader is represented by a 3 x 5 grid (15 bits)
> because it is horizontally symmetric." jtarbell, july 2003

e.g
	[             renders as:
		[1,0,1],              X.X.X
		[1,1,1],              XXXXX
		[0,1,1],              .XXX.
		[0,0,1],              ..X..
		[0,1,0]               .X.X.
	]

Renders to dom elements, for CSS to have it's way with.

@author olizilla
 */


/*
randomInvader: Creates the raw data equivalent of an Invader.
@return {Object} an Invader with a grid property holding the 'pixel' data
 */

(function() {
  var clickRandomPixel, randomInvader, render;

  randomInvader = function() {
    var createCell, createGrid, createRow;
    createCell = function() {
      return Math.round(Math.random() + 0.1);
    };
    createRow = function() {
      var i, results;
      results = [];
      for (i = 0; i <= 2; i++) {
        results.push(createCell());
      }
      return results;
    };
    createGrid = function() {
      var i, results;
      results = [];
      for (i = 0; i <= 4; i++) {
        results.push(createRow());
      }
      return results;
    };
    return {
      grid: createGrid()
    };
  };


  /*
  render: Turns an Invader into DOM and appends it to a container or the body.
  NOTE Empties the container before use so it can be called repeatedly with the same container
   */

  render = function(invader, container) {
    var elements, i, len, ref, renderCell, renderRow, row;
    if (container == null) {
      container = $('body');
    }
    renderCell = function(cell) {
      return $('<div class="pixel">').addClass(cell ? 'on' : '');
    };
    renderRow = function(row) {
      var cell, i, len, ref, results;
      [].splice.apply(row, [4, 0].concat(ref = row.slice(0, 2).reverse())), ref;
      results = [];
      for (i = 0, len = row.length; i < len; i++) {
        cell = row[i];
        results.push(renderCell(cell));
      }
      return results;
    };
    elements = [];
    ref = invader.grid;
    for (i = 0, len = ref.length; i < len; i++) {
      row = ref[i];
      elements = elements.concat(renderRow(row));
    }
    return container.removeClass('on').empty().append(elements);
  };


  /*
  clickRandomPixel: Pick a pixel larger than 20px to click
   */

  clickRandomPixel = function($pixels) {
    var randomIndex, randomPixel, width;
    randomIndex = Math.floor(Math.random() * $pixels.length);
    randomPixel = $pixels[randomIndex];
    width = randomPixel.offsetWidth;
    if (width > 20) {
      return $(randomPixel).click();
    } else {
      return pickRandom($pixels.splice(randomIndex, 1));
    }
  };

  jQuery(function() {
    render(randomInvader());
    $('body').on('click', '.pixel', function(event) {
      render(randomInvader(), $(this));
      return false;
    });
    return setInterval(function() {
      return clickRandomPixel($('.pixel'));
    }, 100);
  });

}).call(this);
